import type { ArcjetDecision, ArcjetOptions as CoreOptions, CharacteristicProps, Primitive, Product, ExtraProps } from "arcjet";
export * from "arcjet";
declare const emptyObjectSymbol: unique symbol;
type WithoutCustomProps = {
    [emptyObjectSymbol]?: never;
};
/**
 * Configuration for {@linkcode createRemoteClient}.
 */
export type RemoteClientOptions = {
    /**
     * Base URI for HTTP requests to Decide API (optional).
     *
     * Defaults to the environment variable `ARCJET_BASE_URL` (if that value
     * is known and allowed) and the standard production API otherwise.
     */
    baseUrl?: string;
    /**
     * Timeout in milliseconds for the Decide API (optional).
     *
     * Defaults to `500` in production and `1000` in development.
     */
    timeout?: number;
};
/**
 * Create a remote client.
 *
 * @param options
 *   Configuration (optional).
 * @returns
 *   Client.
 */
export declare function createRemoteClient(options?: RemoteClientOptions | null | undefined): import("@arcjet/protocol/client.js").Client;
/**
 * Request for the Fastify integration of Arcjet.
 *
 * This is the minimum interface similar to `FastifyRequest` from `fastify`.
 */
export interface ArcjetFastifyRequest {
    /**
     * Request body.
     */
    body: unknown;
    /**
     * Headers of the request.
     */
    headers: Record<string, Array<string> | string | undefined>;
    /**
     * HTTP method of the request.
     */
    method: string;
    /**
     * Protocol of the incoming request.
     */
    protocol: "https" | "http";
    /**
     * Fastify server instance.
     */
    server: {
        initialConfig?: {
            https?: unknown;
        } | undefined;
    };
    /**
     * Underlying connection of the incoming request.
     */
    socket: {
        encrypted?: boolean | undefined;
        remoteAddress?: string | undefined;
    };
    /**
     * URL of the incoming request.
     */
    url: string;
}
/**
 * Instance of the Fastify integration of Arcjet.
 *
 * Primarily has a `protect()` method to make a decision about how a Fastify request
 * should be handled.
 *
 * @template Props
 *   Configuration.
 */
export interface ArcjetFastify<Props> {
    /**
     * Make a decision about how to handle a request.
     *
     * This will analyze the request locally where possible and otherwise call
     * the Arcjet decision API.
     *
     * @param request
     *   Details about the {@linkcode FastifyRequest} that Arcjet needs to make a
     *   decision.
     * @param properties
     *   Additional properties required for running rules against a request.
     * @returns
     *   Promise that resolves to an {@linkcode ArcjetDecision} indicating
     *   Arcjetâ€™s decision about the request.
     */
    protect(request: ArcjetFastifyRequest, ...properties: Props extends WithoutCustomProps ? [] : [Props]): Promise<ArcjetDecision>;
    /**
     * Augment the client with another rule.
     *
     * Useful for varying rules based on criteria in your handler such as
     * different rate limit for logged in users.
     *
     * @template Rule
     *   Type of rule.
     * @param rule
     *   Rule to add to Arcjet.
     * @returns
     *   Arcjet instance augmented with the given rule.
     */
    withRule<Rule extends Primitive | Product>(rules: Rule): ArcjetFastify<Props & ExtraProps<Rule>>;
}
/**
 * Configuration for the Fastify integration of Arcjet.
 *
 * @template Rules
 *   List of rules.
 * @template Characteristics
 *   Characteristics to track a user by.
 */
export type ArcjetOptions<Rules extends [...Array<Primitive | Product>], Characteristics extends ReadonlyArray<string>> = CoreOptions<Rules, Characteristics> & {
    /**
     * One or more IP Address of trusted proxies in front of the application.
     * These addresses will be excluded when Arcjet detects a public IP address.
     */
    proxies?: ReadonlyArray<string> | null | undefined;
};
/**
 * Create a new Fastify integration of Arcjet.
 *
 * > ðŸ‘‰ **Tip**:
 * > build your initial base client with as many rules as possible outside of a
 * > request handler;
 * > if you need more rules inside handlers later then you can call `withRule()`
 * > on that base client.
 *
 * @template Rules
 *   List of rules.
 * @template Characteristics
 *   Characteristics to track a user by.
 * @param options
 *   Configuration.
 * @returns
 *   Fastify integration of Arcjet.
 */
export default function arcjet<const Rules extends (Primitive | Product)[], const Characteristics extends readonly string[]>(options: ArcjetOptions<Rules, Characteristics>): ArcjetFastify<ExtraProps<Rules> & CharacteristicProps<Characteristics>>;
